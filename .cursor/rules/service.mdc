---
description: 
globs: 
alwaysApply: true
---
# サービス仕様書 v1.9 — Docbase連携 NotebookLM 用ドキュメント生成アプリ

> **最終更新日** 2025-05-17   > **作成者** （記入）  > **ドキュメント ID** NB-MD-GEN-001

---

## 1. ユースケース & UX フロー

### 1.1 主要ユースケース

1. **情報収集**

   * ユーザーが「キーワード」「Docbase ドメイン」「Docbase トークン」およびオプションで詳細検索条件（タグ、投稿者、タイトル、投稿期間、グループ）を入力。
   * メインの検索キーワードは「完全一致」として扱われます。
   * **検索リクエスト** `/teams/{domain}/posts?q={query}` を実行し、該当メモの *ID / title / created_at / url / body* を最大500件まで取得。
   * 取得したメモの `body` を結合し 1 つの Markdown ファイルへ整形。
2. **NotebookLM 学習**

   * 生成された `.md` を NotebookLM にアップロードし、AI 質問応答のソースにする。

### 1.2 UI ワイヤフロー

```
[キーワード & ドメイン & トークン入力]
        ↓ searchDocbase()
[Markdown プレビュー (全文)]
        ↓ [Markdown DL]
[DL 完了トースト]
```

### 1.3 画面構成（スクリーン）

| ID | 画面名      | 主なコンポーネント                                                                  | 機能概要                          |
| -- | -------- | -------------------------------------------------------------------------- | ----------------------------- |
| S1 | **検索画面** | `SearchForm`, `DocbaseDomainInput`, `DocbaseTokenInput`, `AdvancedSearchFilters` (タグ、投稿者、タイトル、投稿期間、グループ入力欄), `MarkdownPreview` (取得記事のうち最大10件表示), 取得件数表示 | 検索実行・Markdown 生成 (最大500件)・DL |

---

## 2. 機能要件

### 2.1 データ取得フロー（フロントエンド fetch）

| フェーズ | メソッド & エンドポイント                   | 認証ヘッダー           | パラメータ                             | 目的                                       |
| ---- | -------------------------------- | ---------------- | --------------------------------- | ---------------------------------------- |
| 検索   | `GET /teams/{domain}/posts`      | `X-DocBaseToken` | `q` (メインキーワードはダブルクォートで囲み完全一致検索。詳細検索条件が指定された場合はAND結合。詳細は2.1.1参照), `page` (1~5), `per_page` (100) | 該当メモの **ID・title・created_at・url・body** を最大500件取得             |

### 2.1.1 詳細検索条件 (新規追加セクション)

メインの検索キーワードに加え、以下の詳細条件を指定することで、より絞り込んだ検索が可能です。各条件は Docbase API の検索クエリパラメータ `q` に AND 条件として結合されます。

| 条件       | Docbase API クエリ形式                  | 例                                         |
| ---------- | --------------------------------------- | ------------------------------------------ |
| タグ       | `tag:タグ名`                            | `tag:API tag:設計` (複数指定可、カンマ区切り入力) |
| 投稿者     | `author:ユーザーID`                     | `author:user123`                           |
| タイトル   | `title:キーワード`                      | `title:仕様書`                             |
| 投稿期間   | `created_at:YYYY-MM-DD~YYYY-MM-DD`      | `created_at:2023-01-01~2023-12-31`         |
|            | `created_at:YYYY-MM-DD~*` (開始日のみ)  | `created_at:2024-01-01~*`                  |
|            | `created_at:*~YYYY-MM-DD` (終了日のみ)  | `created_at:*~2024-03-31`                  |
| グループ   | `group:グループ名`                      | `group:開発チーム`                         |

例: キーワード「バグ報告」、タグ「iOS」、投稿者「dev_user」、タイトル「クラッシュ」、投稿期間「2024-01-01から」、グループ「モバイル班」の場合の `q` パラメータ
`"バグ報告" tag:iOS author:dev_user title:クラッシュ created_at:2024-01-01~* group:モバイル班`

### 2.2 Markdown 生成

* Markdownプレビューには、検索結果のうち最大10件の投稿内容が表示されます。
* ダウンロードされるMarkdownファイルには、検索結果の最大500件の投稿内容が以下のテンプレートで追加されます。

  ````md
  ## {title}

  > {created_at}  
  > {url}

  ```md
  {body}
  ````

### 2.3 ファイルダウンロード

* `Blob` → `<a download>` 方式で `notebooklm_{keyword}_{YYYYMMDDHHmmss}.md` を保存。
* 分割時は `_1`, `_2` … を末尾に付与。

### 2.4 トークン管理

* Docbase **トークン**と**ドメイン**を `localStorage` に平文保存。
  初回アクセス時のみ入力必須とし、以降は自動補完。

### 2.5 エラーハンドリング

| エラー         | 表示                             | 再試行                |
| ----------- | ------------------------------ | ------------------ |
| 401         | 「トークンが無効です」トースト & トークン再入力ダイアログ | ―                  |
| 429         | 「Docbase が混み合っています」トースト        | 自動再試行（指数バックオフ 3 回） |
| fetch error | 「ネットワークに接続できません」トースト           | 手動再試行ボタン           |

---

## 3. フロントエンドアーキテクチャ

```
┌───────────── Next.js (React) ─────────────┐
│  useSearch(keyword, domain, token)       │
│   └─ fetchList()  ───────→ Markdown      │
│        └─ generateBlob() → download()    │
└──────────────────────────────────────────┘
```

### 3.1 技術スタック

| レイヤ           | 技術                                |
| ------------- | --------------------------------- |
| UI            | Next.js 15 / React / Tailwind CSS |
| データ取得         | fetch / TanStack Query            |
| ストレージ         | localStorage                      |
| Lint / Format | **Biome**                         |

---

## 4. データモデル (TypeScript)

```ts
type DocbasePostListItem = {
  id: number;
  title: string;
  body: string;
  created_at: string; // ISO-8601
  url: string;
};

```

---

## 5. デプロイ & CI/CD

1. GitHub Actions で `biome check` → `tsc --noEmit` → `next build && next export`。
2. `main` ブランチ push で `actions/upload-pages-artifact@v1` → `actions/deploy-pages@v1`。
3. 公開 URL: `https://<org|user>.github.io/<repo>/`。

   * Next.js の `assetPrefix` を Pages パスに合わせること。

---

## 6. API 利用ガイド

### 6.1 Docbase API

| 操作 | Endpoint                     | ヘッダー             | クエリ                     |
| -- | ---------------------------- | ---------------- | ----------------------- |
| 検索 | `/teams/{domain}/posts`      | `X-DocBaseToken` | `q`, `page`, `per_page` |

#### curl サンプル

```bash
# 例）完全一致させたいキーワードを変数に入れる
KEYWORD='営業定例'

# 完全一致（"営業定例"）で検索し、関連度スコアが高い順に並べる
curl -G "https://api.docbase.io/teams/${TEAM}/posts" \
     -H "X-DocBaseToken: ${TOKEN}" \
     --data-urlencode "q=\""${KEYWORD}\"" \
     --data-urlencode "sort=score" \
     --data-urlencode "direction=desc"

# 詳細検索条件を組み合わせた例
# キーワード「仕様書」、タグ「API」、グループ「開発チーム」で検索
# (実際のAPIリクエストでは、各条件はスペースで区切ってqパラメータに含めます)
curl -G "https://api.docbase.io/teams/${TEAM}/posts" \
     -H "X-DocBaseToken: ${TOKEN}" \
     --data-urlencode 'q="仕様書" tag:API group:開発チーム'
---

